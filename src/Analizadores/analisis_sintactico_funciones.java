
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.io.*;
import java.util.*;
import java.text.*;
import java.util.Stack;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico_funciones extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos_funciones.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico_funciones() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico_funciones(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico_funciones(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\013\000\002\002\015" +
    "\000\002\002\013\000\002\002\015\000\002\002\021\000" +
    "\002\002\021\000\002\002\021\000\002\002\021\000\002" +
    "\002\020\000\002\002\002\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\010\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\005\000\002\007\006\000\002\004" +
    "\005\000\002\004\003\000\002\005\006\000\002\005\002" +
    "\000\002\006\005\000\002\006\005\000\002\006\006\000" +
    "\002\006\007\000\002\006\010\000\002\006\005\000\002" +
    "\006\006\000\002\006\003\000\002\006\003\000\002\006" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\022\002\ufff4\025\010\026\013\027\006\031" +
    "\012\032\004\037\007\041\005\001\002\000\004\042\156" +
    "\001\002\000\004\011\141\001\002\000\004\042\131\001" +
    "\002\000\004\042\072\001\002\000\004\004\062\001\002" +
    "\000\004\002\061\001\002\000\004\011\047\001\002\000" +
    "\004\004\014\001\002\000\004\005\015\001\002\000\006" +
    "\006\uffe2\007\016\001\002\000\010\016\024\043\023\044" +
    "\025\001\002\000\004\006\020\001\002\000\022\002\ufff4" +
    "\025\010\026\013\027\006\031\012\032\004\037\007\041" +
    "\005\001\002\000\004\002\uffff\001\002\000\004\010\045" +
    "\001\002\000\006\010\uffda\013\043\001\002\000\004\044" +
    "\034\001\002\000\010\010\uffd9\013\027\015\026\001\002" +
    "\000\004\044\031\001\002\000\010\016\024\043\023\044" +
    "\025\001\002\000\004\010\uffe0\001\002\000\006\010\uffdc" +
    "\013\032\001\002\000\010\016\024\043\023\044\025\001" +
    "\002\000\004\010\uffde\001\002\000\010\010\uffd8\013\036" +
    "\015\035\001\002\000\004\044\040\001\002\000\010\016" +
    "\024\043\023\044\025\001\002\000\004\010\uffdf\001\002" +
    "\000\006\010\uffdb\013\041\001\002\000\010\016\024\043" +
    "\023\044\025\001\002\000\004\010\uffdd\001\002\000\010" +
    "\016\024\043\023\044\025\001\002\000\004\010\uffe1\001" +
    "\002\000\006\006\uffe2\007\016\001\002\000\004\006\uffe3" +
    "\001\002\000\006\042\052\043\051\001\002\000\006\012" +
    "\053\013\054\001\002\000\006\012\ufff1\013\ufff1\001\002" +
    "\000\006\012\ufff0\013\ufff0\001\002\000\004\014\057\001" +
    "\002\000\006\042\056\043\055\001\002\000\006\012\ufff3" +
    "\013\ufff3\001\002\000\006\012\ufff2\013\ufff2\001\002\000" +
    "\022\002\ufff4\025\010\026\013\027\006\031\012\032\004" +
    "\037\007\041\005\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\001\001\002\000\004\005\063\001\002\000\004" +
    "\043\064\001\002\000\006\006\uffe4\013\070\001\002\000" +
    "\004\006\066\001\002\000\022\002\ufff4\025\010\026\013" +
    "\027\006\031\012\032\004\037\007\041\005\001\002\000" +
    "\004\002\000\001\002\000\004\043\064\001\002\000\004" +
    "\006\uffe5\001\002\000\004\004\073\001\002\000\004\040" +
    "\074\001\002\000\004\011\075\001\002\000\004\042\076" +
    "\001\002\000\004\013\077\001\002\000\004\043\100\001" +
    "\002\000\004\013\101\001\002\000\016\017\107\020\106" +
    "\021\104\022\110\023\102\024\103\001\002\000\004\013" +
    "\uffeb\001\002\000\004\013\uffea\001\002\000\004\013\uffed" +
    "\001\002\000\004\013\111\001\002\000\004\013\uffee\001" +
    "\002\000\004\013\uffef\001\002\000\004\013\uffec\001\002" +
    "\000\010\016\114\043\112\044\115\001\002\000\004\012" +
    "\126\001\002\000\004\012\123\001\002\000\004\044\120" +
    "\001\002\000\006\012\uffe9\015\116\001\002\000\004\044" +
    "\117\001\002\000\004\012\uffe7\001\002\000\006\012\uffe8" +
    "\015\121\001\002\000\004\044\122\001\002\000\004\012" +
    "\uffe6\001\002\000\004\014\124\001\002\000\022\002\ufff4" +
    "\025\010\026\013\027\006\031\012\032\004\037\007\041" +
    "\005\001\002\000\004\002\ufff7\001\002\000\004\014\127" +
    "\001\002\000\022\002\ufff4\025\010\026\013\027\006\031" +
    "\012\032\004\037\007\041\005\001\002\000\004\002\ufff6" +
    "\001\002\000\004\004\132\001\002\000\004\030\133\001" +
    "\002\000\004\011\134\001\002\000\004\043\135\001\002" +
    "\000\004\012\136\001\002\000\004\014\137\001\002\000" +
    "\022\002\ufff4\025\010\026\013\027\006\031\012\032\004" +
    "\037\007\041\005\001\002\000\004\002\ufffd\001\002\000" +
    "\004\043\142\001\002\000\004\013\143\001\002\000\004" +
    "\043\144\001\002\000\004\013\145\001\002\000\004\042" +
    "\146\001\002\000\004\013\147\001\002\000\004\043\150" +
    "\001\002\000\004\013\151\001\002\000\004\043\152\001" +
    "\002\000\004\012\153\001\002\000\004\014\154\001\002" +
    "\000\022\002\ufff4\025\010\026\013\027\006\031\012\032" +
    "\004\037\007\041\005\001\002\000\004\002\ufff5\001\002" +
    "\000\004\004\157\001\002\000\012\033\161\034\162\035" +
    "\160\036\163\001\002\000\004\011\217\001\002\000\004" +
    "\011\210\001\002\000\004\011\203\001\002\000\004\011" +
    "\164\001\002\000\004\042\165\001\002\000\004\013\166" +
    "\001\002\000\004\043\167\001\002\000\004\013\170\001" +
    "\002\000\016\017\107\020\106\021\104\022\110\023\102" +
    "\024\103\001\002\000\004\013\172\001\002\000\010\016" +
    "\114\043\173\044\115\001\002\000\004\012\200\001\002" +
    "\000\004\012\175\001\002\000\004\014\176\001\002\000" +
    "\022\002\ufff4\025\010\026\013\027\006\031\012\032\004" +
    "\037\007\041\005\001\002\000\004\002\ufff9\001\002\000" +
    "\004\014\201\001\002\000\022\002\ufff4\025\010\026\013" +
    "\027\006\031\012\032\004\037\007\041\005\001\002\000" +
    "\004\002\ufff8\001\002\000\004\042\204\001\002\000\004" +
    "\012\205\001\002\000\004\014\206\001\002\000\022\002" +
    "\ufff4\025\010\026\013\027\006\031\012\032\004\037\007" +
    "\041\005\001\002\000\004\002\ufffb\001\002\000\004\042" +
    "\211\001\002\000\004\013\212\001\002\000\004\043\213" +
    "\001\002\000\004\012\214\001\002\000\004\014\215\001" +
    "\002\000\022\002\ufff4\025\010\026\013\027\006\031\012" +
    "\032\004\037\007\041\005\001\002\000\004\002\ufffc\001" +
    "\002\000\004\042\220\001\002\000\004\013\221\001\002" +
    "\000\004\043\222\001\002\000\004\012\223\001\002\000" +
    "\004\014\224\001\002\000\022\002\ufff4\025\010\026\013" +
    "\027\006\031\012\032\004\037\007\041\005\001\002\000" +
    "\004\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\016\001\001\000\004" +
    "\006\021\001\001\000\002\001\001\000\004\002\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\041\001\001\000" +
    "\002\001\001\000\004\006\043\001\001\000\002\001\001" +
    "\000\004\005\045\001\001\000\002\001\001\000\004\010" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\066\001\001\000\002\001\001\000\004\004\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\170\001\001\000\002" +
    "\001\001\000\004\007\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\224\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico_funciones$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico_funciones$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico_funciones$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    
    //para el metodo leer archivos
    Stack<String> pila_claves = new Stack<String>();
    Stack<Object> pila_registros = new Stack<Object>();

    //para las tablas de registros de archivos
    public DefaultTableModel modeloTablaArchivo;
    public static HashMap<String,DefaultTableModel> hmTablasArchivos= new HashMap<String,DefaultTableModel>();
    
    //para errores
    public static Stack<String> pila_imprimirErrores = new Stack<String>();

    //para guardar variables y verificar si existe la variable
    public static HashMap<String,Object> alExistenciaDeVariable= new HashMap<String,Object>();

    public int contCuantasClaves=0;
    public int contRegistros=0;
        
    // ------------------------------------------------------ FUNCION SUMAR------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------
    public void funcionSumar(DefaultTableModel tabla, String nomClave, String idTipoArchivo, String nomFuncion)
    {
        boolean encontrado=false;
        int numColumn=0;
        Double totalSuma=0.0;
        
                for (int i = 0; i < tabla.getColumnCount(); i++) 
                {
                    String claveActual=tabla.getValueAt(1, i).toString();
                    if(claveActual.equals(nomClave))
                    {
                        encontrado=true;
                        numColumn=i;
                    }
                }

                if(encontrado==true)
                {
                        if(tabla.getValueAt(0, numColumn).toString().equals("numerico"))
                        {
                                for (int i = 2; i < tabla.getRowCount(); i++) 
                                {
                                    Double temp=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                    totalSuma=totalSuma+temp;
                                } 
                                String aux=totalSuma.toString();
                                alExistenciaDeVariable.put(nomFuncion,aux);
                        }
                        else{
                            String err="LA CLAVE: " + nomClave + " DE LA FUNCION SUMAR: " + nomFuncion + " NO ES TIPO NUMERICO" ;
                            pila_imprimirErrores.push(err);
                        }
                }
                else{
                    String err="LA CLAVE DE LA FUNCION SUMAR: " + nomFuncion + " NO HA SIDO ENCONTRADA EN EL ARCHIVO: " + idTipoArchivo;
                    pila_imprimirErrores.push(err);
                }
        
    }   

    // ------------------------------------------------------ FUNCION CONTRAR------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------
    public void funcionContar(DefaultTableModel tabla, String nomFuncion)
    { 
        int cant=tabla.getRowCount();
        Integer cant2=cant-2; //las primeras dos son: tipo de dato y nombre de clave, por eso el -2
        String aux=cant2.toString();
        
        alExistenciaDeVariable.put(nomFuncion,aux);

    }

    // ------------------------------------------------------ FUNCION PROMEDIO----------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------
    public void funcionPromedio(DefaultTableModel tabla, String nomClave, String idTipoArchivo, String nomFuncion)
    {
        boolean encontrado=false;
        int numColumn=0;
        Double totalSuma=0.0;
        
                for (int i = 0; i < tabla.getColumnCount(); i++) 
                {
                    String claveActual=tabla.getValueAt(1, i).toString();
                    if(claveActual.equals(nomClave))
                    {
                        encontrado=true;
                        numColumn=i;
                    }
                }

                if(encontrado==true)
                {
                        if(tabla.getValueAt(0, numColumn).toString().equals("numerico"))
                        {
                                for (int i = 2; i < tabla.getRowCount(); i++) 
                                {
                                    Double temp=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                    totalSuma=totalSuma+temp;
                                } 
                                int cant=tabla.getRowCount();
                                int cant2=cant-2;
                                Double cont3=totalSuma / cant2;
                                String aux=cont3.toString() ;
                                alExistenciaDeVariable.put(nomFuncion,aux);
                        }
                        else{
                            String err="LA CLAVE: " + nomClave + " DE LA FUNCION PROMEDIO: " + nomFuncion + " NO ES TIPO NUMERICO" ;
                            pila_imprimirErrores.push(err);
                        }
                }
                else{
                    String err="LA CLAVE DE LA FUNCION PROMEDIO: " + nomFuncion + " NO HA SIDO ENCONTRADA EN EL ARCHIVO: " + idTipoArchivo ;
                    pila_imprimirErrores.push(err);
                }        
    }   

    // ------------------------------------------------------ FUNCION CONTARSI----------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------
    public void funcionContarSi(DefaultTableModel tabla, String nomClave, String operador, String valor, String idTipoArchivo, String nomFuncion)
    {
        boolean encontrado=false;
        int numColumn=0;
        Double totalSuma=0.0;
        Integer contCuantos=0;
        
                for (int i = 0; i < tabla.getColumnCount(); i++) 
                {
                    String claveActual=tabla.getValueAt(1, i).toString();
                    if(claveActual.equals(nomClave))
                    {
                        encontrado=true;
                        numColumn=i;
                    }
                }

                if(encontrado==true)
                {
                        if(tabla.getValueAt(0, numColumn).toString().equals("numerico"))
                        {
                                if(operador.equals(">"))
                                {
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(valTabla>val)
                                            {
                                               contCuantos=contCuantos+1; 
                                            }
                                        } 
                                        String aux=contCuantos.toString() ;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals("<"))
                                {
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(valTabla<val)
                                            {
                                               contCuantos=contCuantos+1; 
                                            }
                                        } 
                                        String aux=contCuantos.toString() ;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals(">="))
                                {
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(valTabla>=val)
                                            {
                                               contCuantos=contCuantos+1; 
                                            }
                                        } 
                                        String aux=contCuantos.toString() ;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals("<="))
                                {
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(valTabla<=val)
                                            {
                                               contCuantos=contCuantos+1; 
                                            }
                                        } 
                                        String aux=contCuantos.toString() ;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals("=="))
                                {   
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(Objects.equals(valTabla, val))
                                            {
                                               contCuantos=contCuantos+1; 
                                            }
                                        } 
                                        String aux=contCuantos.toString() ;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals("!="))
                                {
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(!Objects.equals(valTabla, val))
                                            {
                                               contCuantos=contCuantos+1; 
                                            }
                                        } 
                                        String aux=contCuantos.toString() ;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }                                                                
                        }
                        else{
                            String err="LA CLAVE: " + nomClave + " DE LA FUNCION CONTARSI: " + nomFuncion + " NO ES TIPO NUMERICO" ;
                            pila_imprimirErrores.push(err);
                        }
                }
                else{
                    String err="LA CLAVE: " + nomClave + " DE LA FUNCION CONTARSI: " + nomFuncion + " NO HA SIDO ENCONTRADA EN EL ARCHIVO: " + idTipoArchivo;
                    pila_imprimirErrores.push(err);
                } 
        
    }

    // ------------------------------------------------------ FUNCION CONTARSI CADENA----------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------
    public void funcionContarSiCadena(DefaultTableModel tabla, String nomClave, String operador, String valor, String idTipoArchivo, String nomFuncion)
    {
        boolean encontrado=false;
        int numColumn=0;
        Double totalSuma=0.0;
        Integer contCuantos=0;
        
                for (int i = 0; i < tabla.getColumnCount(); i++) 
                {
                    String claveActual=tabla.getValueAt(1, i).toString();
                    if(claveActual.equals(nomClave))
                    {
                        encontrado=true;
                        numColumn=i;
                    }
                }

                if(encontrado==true)
                {
                        if(tabla.getValueAt(0, numColumn).toString().equals("string"))
                        {                                                               
                                if(operador.equals(">"))
                                {
                                   String err="LA CLAVE: " + nomClave + " DE LA FUNCION CONTARSI: " + nomFuncion + " NO PUEDE HACER EL TIPOD DE COMPARACION '>' " ;
                                   pila_imprimirErrores.push(err);     
                                }
                                else if(operador.equals("<"))
                                {
                                   String err="LA CLAVE: " + nomClave + " DE LA FUNCION CONTARSI: " + nomFuncion + " NO PUEDE HACER EL TIPOD DE COMPARACION '<' " ;
                                   pila_imprimirErrores.push(err);      
                                }
                                else if(operador.equals(">="))
                                {
                                   String err="LA CLAVE: " + nomClave + " DE LA FUNCION CONTARSI: " + nomFuncion + " NO PUEDE HACER EL TIPOD DE COMPARACION '>=' " ;
                                   pila_imprimirErrores.push(err);      
                                }
                                else if(operador.equals("<="))
                                {
                                   String err="LA CLAVE: " + nomClave + " DE LA FUNCION CONTARSI: " + nomFuncion + " NO PUEDE HACER EL TIPOD DE COMPARACION '<=' " ;
                                   pila_imprimirErrores.push(err);      
                                }
                                else if(operador.equals("=="))
                                {   
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {
                                            String valTabla=tabla.getValueAt(i, numColumn).toString();
                                            if(valor.equals(valTabla))
                                            {
                                               contCuantos=contCuantos+1; 
                                            }
                                        } 
                                        String aux=contCuantos.toString() ;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals("!="))
                                {
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {
                                            String valTabla=tabla.getValueAt(i, numColumn).toString();
                                            if(!valor.equals(valTabla))
                                            {
                                               contCuantos=contCuantos+1; 
                                            }
                                        } 
                                        String aux=contCuantos.toString() ;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }                                                                
                        }
                        else{
                            String err="LA CLAVE: " + nomClave + " DE LA FUNCION CONTARSI: " + nomFuncion + " NO ES TIPO CADENA" ;
                            pila_imprimirErrores.push(err);
                        }
                }
                else{
                    String err="LA CLAVE: " + nomClave + " DE LA FUNCION CONTARSI: " + nomFuncion + " NO HA SIDO ENCONTRADA EN EL ARCHIVO: " + idTipoArchivo;
                    pila_imprimirErrores.push(err);
                }         
    }

    // ------------------------------------------------------ FUNCION OBTENERSI----------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------
    public void funcionObtenerSi(DefaultTableModel tabla, String nomClave, String operador, String valor, String idTipoArchivo, String nomFuncion)
    {
        boolean encontrado=false;
        int numColumn=0;
        String cadenaRegis="[ \n";
        
                for (int i = 0; i < tabla.getColumnCount(); i++) 
                {
                    String claveActual=tabla.getValueAt(1, i).toString();
                    if(claveActual.equals(nomClave))
                    {
                        encontrado=true;
                        numColumn=i;
                    }
                }

                if(encontrado==true)
                {
                        if(tabla.getValueAt(0, numColumn).toString().equals("numerico"))
                        {
                                if(operador.equals(">"))
                                {
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {                                           
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(valTabla>val)
                                            {
                                                    cadenaRegis+="{" ;
                                                    for (int j = 0; j < tabla.getColumnCount(); j++) 
                                                    {
                                                         String clave=tabla.getValueAt(1, j).toString(); //obtengo clave
                                                         String clave2=clave.substring(1,clave.length()-1); //quito comillas de clave
                                                         String registro=tabla.getValueAt(i,j).toString(); //obtengo el registro de esa clave
                                                         cadenaRegis+=clave2 + ":" ;
                                                         cadenaRegis+=registro + "," ;
                                                    }
                                                    cadenaRegis+="} \n" ;
                                            }                                            
                                        }
                                        cadenaRegis += "]" ;
                                        String aux=cadenaRegis;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                        
                                }
                                else if(operador.equals("<"))
                                {
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {                                           
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(valTabla<val)
                                            {
                                                    cadenaRegis+="{" ;
                                                    for (int j = 0; j < tabla.getColumnCount(); j++) 
                                                    {
                                                         String clave=tabla.getValueAt(1, j).toString(); //obtengo clave
                                                         String clave2=clave.substring(1,clave.length()-1); //quito comillas de clave
                                                         String registro=tabla.getValueAt(i,j).toString(); //obtengo el registro de esa clave
                                                         cadenaRegis+=clave2 + ":" ;
                                                         cadenaRegis+=registro + "," ;
                                                    }
                                                    cadenaRegis+="} \n" ;
                                            }                                            
                                        }
                                        cadenaRegis += "] \n";
                                        String aux=cadenaRegis;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals(">="))
                                {
                                       Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {                                           
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(valTabla>=val)
                                            {
                                                    cadenaRegis+="{" ;
                                                    for (int j = 0; j < tabla.getColumnCount(); j++) 
                                                    {
                                                         String clave=tabla.getValueAt(1, j).toString(); //obtengo clave
                                                         String clave2=clave.substring(1,clave.length()-1); //quito comillas de clave
                                                         String registro=tabla.getValueAt(i,j).toString(); //obtengo el registro de esa clave
                                                         cadenaRegis+=clave2 + ":" ;
                                                         cadenaRegis+=registro + "," ;
                                                    }
                                                    cadenaRegis+="} \n" ;
                                            }                                            
                                        }
                                        cadenaRegis += "] ";
                                        String aux=cadenaRegis;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals("<="))
                                {
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {                                           
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(valTabla<=val)
                                            {
                                                    cadenaRegis+="{" ;
                                                    for (int j = 0; j < tabla.getColumnCount(); j++) 
                                                    {
                                                         String clave=tabla.getValueAt(1, j).toString(); //obtengo clave
                                                         String clave2=clave.substring(1,clave.length()-1); //quito comillas de clave
                                                         String registro=tabla.getValueAt(i,j).toString(); //obtengo el registro de esa clave
                                                         cadenaRegis+=clave2 + ":" ;
                                                         cadenaRegis+=registro + "," ;
                                                    }
                                                    cadenaRegis+="} \n" ;
                                            }                                            
                                        }
                                        cadenaRegis += "] ";
                                        String aux=cadenaRegis;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals("=="))
                                {   
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {                                           
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(Objects.equals(valTabla, val))
                                            {
                                                    cadenaRegis+="{" ;
                                                    for (int j = 0; j < tabla.getColumnCount(); j++) 
                                                    {
                                                         String clave=tabla.getValueAt(1, j).toString(); //obtengo clave
                                                         String clave2=clave.substring(1,clave.length()-1); //quito comillas de clave
                                                         String registro=tabla.getValueAt(i,j).toString(); //obtengo el registro de esa clave
                                                         cadenaRegis+=clave2 + ":" ;
                                                         cadenaRegis+=registro + "," ;
                                                    }
                                                    cadenaRegis+="} \n" ;
                                            }                                            
                                        }
                                        cadenaRegis += "] ";
                                        String aux=cadenaRegis;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals("!="))
                                {
                                        Double val=Double.parseDouble(valor);
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {                                           
                                            Double valTabla=Double.parseDouble(tabla.getValueAt(i, numColumn).toString());
                                            if(!Objects.equals(valTabla, val))
                                            {
                                                    cadenaRegis+="{" ;
                                                    for (int j = 0; j < tabla.getColumnCount(); j++) 
                                                    {
                                                         String clave=tabla.getValueAt(1, j).toString(); //obtengo clave
                                                         String clave2=clave.substring(1,clave.length()-1); //quito comillas de clave
                                                         String registro=tabla.getValueAt(i,j).toString(); //obtengo el registro de esa clave
                                                         cadenaRegis+=clave2 + ":" ;
                                                         cadenaRegis+=registro + "," ;
                                                    }
                                                    cadenaRegis+="} \n" ;
                                            }                                            
                                        }
                                        cadenaRegis += "] ";
                                        String aux=cadenaRegis;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                                                                                 
                        }
                        else{
                            String err="LA CLAVE: " + nomClave + " DE LA FUNCION OBTENERSI: " + nomFuncion + " NO ES TIPO NUMERICO";
                            pila_imprimirErrores.push(err);
                        }
                }
                else{
                    String err="LA CLAVE: " + nomClave + " DE LA FUNCION OBTENERSI: " + nomFuncion + " NO HA SIDO ENCONTRADA EN EL ARCHIVO: " + idTipoArchivo;
                    pila_imprimirErrores.push(err);
                    }
    }
     
    // ------------------------------------------------------ FUNCION OBTENERSI CADENA----------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------
    public void funcionObtenerSiCadena(DefaultTableModel tabla, String nomClave, String operador, String valor, String idTipoArchivo, String nomFuncion)
    {
        boolean encontrado=false;
        int numColumn=0;
        String cadenaRegis="[ \n";
        
                for (int i = 0; i < tabla.getColumnCount(); i++) 
                {
                    String claveActual=tabla.getValueAt(1, i).toString();
                    if(claveActual.equals(nomClave))
                    {
                        encontrado=true;
                        numColumn=i;
                    }
                }

                if(encontrado==true)
                {
                        if(tabla.getValueAt(0, numColumn).toString().equals("string"))
                        {
                                if(operador.equals(">"))
                                {
                                   String err="LA CLAVE: " + nomClave + " DE LA FUNCION OBTENERSI: " + nomFuncion + " NO PUEDE HACER EL TIPO DE COMPARACION '<'";
                                   pila_imprimirErrores.push(err);                                       
                                }
                                else if(operador.equals("<"))
                                {
                                   String err="LA CLAVE: " + nomClave + " DE LA FUNCION OBTENERSI: " + nomFuncion + " NO PUEDE HACER EL TIPO DE COMPARACION '<'";
                                   pila_imprimirErrores.push(err);     
                                }
                                else if(operador.equals(">="))
                                {
                                   String err="LA CLAVE: " + nomClave + " DE LA FUNCION OBTENERSI: " + nomFuncion + " NO PUEDE HACER EL TIPO DE COMPARACION '<'";
                                   pila_imprimirErrores.push(err); 
                                }
                                else if(operador.equals("<="))
                                {
                                   String err="LA CLAVE: " + nomClave + " DE LA FUNCION OBTENERSI: " + nomFuncion + " NO PUEDE HACER EL TIPO DE COMPARACION '<'";
                                   pila_imprimirErrores.push(err);  
                                }
                                else if(operador.equals("=="))
                                {   
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {                                           
                                            String valTabla=tabla.getValueAt(i, numColumn).toString();
                                            if(valor.equals(valTabla))
                                            {
                                                    cadenaRegis+="{" ;
                                                    for (int j = 0; j < tabla.getColumnCount(); j++) 
                                                    {
                                                         String clave=tabla.getValueAt(1, j).toString(); //obtengo clave
                                                         String clave2=clave.substring(1,clave.length()-1); //quito comillas de clave
                                                         String registro=tabla.getValueAt(i,j).toString(); //obtengo el registro de esa clave
                                                         cadenaRegis+=clave2 + ":" ;
                                                         cadenaRegis+=registro + "," ;
                                                    }
                                                    cadenaRegis+="} \n" ;
                                            }                                            
                                        }
                                        cadenaRegis += "] ";
                                        String aux=cadenaRegis;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                else if(operador.equals("!="))
                                {
                                        for (int i = 2; i < tabla.getRowCount(); i++) 
                                        {                                           
                                            String valTabla=tabla.getValueAt(i, numColumn).toString();
                                            if(!valor.equals(valTabla))
                                            {
                                                    cadenaRegis+="{" ;
                                                    for (int j = 0; j < tabla.getColumnCount(); j++) 
                                                    {
                                                         String clave=tabla.getValueAt(1, j).toString(); //obtengo clave
                                                         String clave2=clave.substring(1,clave.length()-1); //quito comillas de clave
                                                         String registro=tabla.getValueAt(i,j).toString(); //obtengo el registro de esa clave
                                                         cadenaRegis+=clave2 + ":" ;
                                                         cadenaRegis+=registro + "," ;
                                                    }
                                                    cadenaRegis+="} \n" ;
                                            }                                            
                                        }
                                        cadenaRegis += "] ";
                                        String aux=cadenaRegis;
                                        alExistenciaDeVariable.put(nomFuncion,aux);
                                }
                                                                                                 
                        }
                        else{
                            String err="LA CLAVE: " + nomClave + " DE LA FUNCION OBTENERSI: " + nomFuncion + " NO ES TIPO CADENA";
                            pila_imprimirErrores.push(err);
                        }
                }
                else{
                    String err="LA CLAVE: " + nomClave + " DE LA FUNCION OBTENERSI: " + nomFuncion + " NO HA SIDO ENCONTRADA EN EL ARCHIVO: " + idTipoArchivo;
                    pila_imprimirErrores.push(err);
                    }
    }
      

    public void graficar(DefaultTableModel tabla, String nombreimg, String titulo, String idTipoArchivo, String valx, String valy)
    {
        boolean encontrado=false;
        boolean encontrado2=false;
        int numColumn=0;
        int numColumn2=0;
        String cadenaRegis="[ \n";
        
                for (int i = 0; i < tabla.getColumnCount(); i++) 
                {
                    String claveActual=tabla.getValueAt(1, i).toString();
                    if(claveActual.equals(valx))
                    {
                        encontrado=true;
                        numColumn=i;
                    }
                    if(claveActual.equals(valy))
                    {
                        encontrado2=true;
                        numColumn2=i;
                    }
                }

                if(encontrado==true && encontrado2==true)
                {
                        if(tabla.getValueAt(0, numColumn).toString().equals("string") && tabla.getValueAt(0, numColumn2).toString().equals("numerico") )
                        {
                                
                            DefaultCategoryDataset datos = new DefaultCategoryDataset();

                            for (int i = 2; i < tabla.getRowCount(); i++) 
                            {
                                String x=tabla.getValueAt(i, numColumn).toString();
                                Double y=Double.parseDouble(tabla.getValueAt(i, numColumn2).toString());
                                datos.setValue(y,x,"");
                                
                            }

                            String tit=titulo.substring(1,titulo.length()-1);
                            String xs=valx.substring(1,valx.length()-1);
                            String ys=valy.substring(1,valy.length()-1);

                            JFreeChart grafico_barras = ChartFactory.createBarChart(tit,xs,ys, datos, PlotOrientation.VERTICAL, true, true, false);

                            try 
                            {
                              String nomimg=nombreimg.substring(1,nombreimg.length()-1);
                              String guard=nomimg+".PNG";
                              ChartUtilities.saveChartAsPNG(new File(guard), grafico_barras, 1000, 800);
                            } catch (Exception e) {
                                    e.printStackTrace();
                            }                                                                                                      
                        }
                        else{
                            String err="UNA O AMBAS DE LAS CLAVES: " + valx + " Y " + valy + " DE LA FUNCION GRAFICAR NO SON DEL TIPO DE DATO CORRECTO";
                            pila_imprimirErrores.push(err);
                        }
                }
                else{
                    String err="UNA O AMBAS DE LAS CLAVES: " + valx + " Y " + valy + " DE LA FUNCION GRAFICAR NO HAN SIDO ENCONTRADAS EN EL ARCHIVO: " + idTipoArchivo;
                    pila_imprimirErrores.push(err);
                    }
    }
    
    
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        //String aa="ERROR SINTACTICO: FUNCI " + "Lexema: " + lexema + " Fila: " + fila + " Columna: " + columna + "\n";
        //System.out.println(aa);
        //System.out.println("\t\tLexema: "+lexema);
        //System.out.println("\t\tFila: "+fila);
        //System.out.println("\t\tColumna: "+columna);
                
                
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        //System.out.println("!!!!!!! Error Sintactico FUNCIONES!!!!!!! ");
        //System.out.println("\t\tLexema: "+lexema);
        //System.out.println("\t\tFila: "+fila);
        //System.out.println("\t\tColumna: "+columna);
        

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico_funciones$actions {



  private final analisis_sintactico_funciones parser;

  /** Constructor */
  CUP$analisis_sintactico_funciones$actions(analisis_sintactico_funciones parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_funciones$do_action_part00000000(
    int                        CUP$analisis_sintactico_funciones$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_funciones$parser,
    java.util.Stack            CUP$analisis_sintactico_funciones$stack,
    int                        CUP$analisis_sintactico_funciones$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico_funciones$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico_funciones$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico_funciones$parser.done_parsing();
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= claves igual corchabre VALORES_CLAVE corchcierra INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= registros igual corchabre REGISTROS corchcierra INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= imprimir parenabre IMPRICOCAT parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;

              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= archivo id igual leerarchivo parenabre cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= numerico id igual sumar parenabre id coma cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		 if(alExistenciaDeVariable.containsKey(a.toString()))
            {
               String exis="LA VARIABLE " + a.toString() + " YA EXISTE!" ;
               pila_imprimirErrores.push(exis); 
            }else
                {  if(alExistenciaDeVariable.containsKey(b.toString()))
                   {
                        DefaultTableModel tabla=hmTablasArchivos.get(b.toString());
                        funcionSumar(tabla, c.toString(), b.toString(), a.toString() ); 
                   }else{
                        String err="EL IDENTIFICADOR TIPO ARCHIVO " + b.toString() + " DE LA FUNCION SUMAR: " + a.toString() + " NO HA SIDO ENCONTRADA" ;
                        pila_imprimirErrores.push(err); 
                   }
                } 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= numerico id igual contar parenabre id parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		 if(alExistenciaDeVariable.containsKey(a.toString()))
            {
               String exis="LA VARIABLE " + a.toString() + " YA EXISTE!" ;
               pila_imprimirErrores.push(exis); 
            }else
                {  if(alExistenciaDeVariable.containsKey(b.toString()))
                   {
                        DefaultTableModel tabla=hmTablasArchivos.get(b.toString());
                        funcionContar(tabla, a.toString()); 
                   }else{
                        String err="EL IDENTIFICADOR TIPO ARCHIVO " + b.toString() + " DE LA FUNCION CONTAR: " + a.toString() + " NO HA SIDO ENCONTRADA" ;
                        pila_imprimirErrores.push(err); 
                   }
                } 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= numerico id igual promedio parenabre id coma cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		 if(alExistenciaDeVariable.containsKey(a.toString()))
            {
               String exis="LA VARIABLE " + a.toString() + " YA EXISTE!" ;
               pila_imprimirErrores.push(exis); 
            }else
                {  if(alExistenciaDeVariable.containsKey(b.toString()))
                   {
                        DefaultTableModel tabla=hmTablasArchivos.get(b.toString());
                        funcionPromedio(tabla, c.toString(), b.toString(), a.toString() ); 
                   }else{
                        String err="EL IDENTIFICADOR TIPO ARCHIVO " + b.toString() + " DE LA FUNCION PROMEDIO: " + a.toString() + " NO HA SIDO ENCONTRADA" ;
                        pila_imprimirErrores.push(err); 
                   }
                }  
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= numerico id igual contarsi parenabre id coma cadena coma OPERADORES coma VALOR parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		 if(alExistenciaDeVariable.containsKey(a.toString()))
            {
               String exis="LA VARIABLE " + a.toString() + " YA EXISTE!" ;
               pila_imprimirErrores.push(exis); 
            }else
            {  if(alExistenciaDeVariable.containsKey(b.toString()))
               {
                    DefaultTableModel tabla=hmTablasArchivos.get(b.toString());
                    funcionContarSi(tabla, c.toString(), op.toString(), va.toString(), b.toString(), a.toString()); 
               }else{
                    String err="EL IDENTIFICADOR TIPO ARCHIVO " + b.toString() + " DE LA FUNCION CONTARSI: " + a.toString() + " NO HA SIDO ENCONTRADA" ;
                    pila_imprimirErrores.push(err); 
               }
            } 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= numerico id igual contarsi parenabre id coma cadena coma OPERADORES coma cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		 if(alExistenciaDeVariable.containsKey(a.toString()))
            {
               String exis="LA VARIABLE " + a.toString() + " YA EXISTE!" ;
               pila_imprimirErrores.push(exis); 
            }else
            {  if(alExistenciaDeVariable.containsKey(b.toString()))
               {
                    DefaultTableModel tabla=hmTablasArchivos.get(b.toString());
                    funcionContarSiCadena(tabla, c.toString(), op.toString(), va.toString(), b.toString(), a.toString()); 
               }else{
                    String err="EL IDENTIFICADOR TIPO ARCHIVO " + b.toString() + " DE LA FUNCION CONTARSI: " + a.toString() + " NO HA SIDO ENCONTRADA" ;
                    pila_imprimirErrores.push(err); 
               }
            } 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= cadenareserv id igual obtenersi parenabre id coma cadena coma OPERADORES coma VALOR parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		 if(alExistenciaDeVariable.containsKey(a.toString()))
            {
               String exis="LA VARIABLE " + a.toString() + " YA EXISTE!" ;
               pila_imprimirErrores.push(exis); 
            }else
            {  if(alExistenciaDeVariable.containsKey(b.toString()))
               {
                    DefaultTableModel tabla=hmTablasArchivos.get(b.toString());
                    funcionObtenerSi(tabla, c.toString(), op.toString(), va.toString(), b.toString(), a.toString()); 
               }else{
                    String err="EL IDENTIFICADOR TIPO ARCHIVO " + b.toString() + " DE LA FUNCION OBTENERSI: " + a.toString() + " NO HA SIDO ENCONTRADA" ;
                    pila_imprimirErrores.push(err); 
               }
            } 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= cadenareserv id igual obtenersi parenabre id coma cadena coma OPERADORES coma cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		 if(alExistenciaDeVariable.containsKey(a.toString()))
            {
               String exis="LA VARIABLE " + a.toString() + " YA EXISTE!" ;
               pila_imprimirErrores.push(exis); 
            }else
            {  if(alExistenciaDeVariable.containsKey(b.toString()))
               {
                    DefaultTableModel tabla=hmTablasArchivos.get(b.toString());
                    funcionObtenerSiCadena(tabla, c.toString(), op.toString(), va.toString(), b.toString(), a.toString()); 
               }else{
                    String err="EL IDENTIFICADOR TIPO ARCHIVO " + b.toString() + " DE LA FUNCION OBTENERSI: " + a.toString() + " NO HA SIDO ENCONTRADA" ;
                    pila_imprimirErrores.push(err); 
               }
            } 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= graficar parenabre cadena coma cadena coma id coma cadena coma cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-11)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-11)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-11)).value;
		int titleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-9)).value;
		int archleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).left;
		int archright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).right;
		Object arch = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-7)).value;
		int vaxleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).left;
		int vaxright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).right;
		Object vax = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).value;
		int vayleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int vayright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object vay = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		 if(alExistenciaDeVariable.containsKey(arch.toString()))
               {
                    DefaultTableModel tabla=hmTablasArchivos.get(arch.toString());
                    graficar(tabla, nom.toString(), tit.toString(), arch.toString(), vax.toString(), vay.toString()); 
               }else{
                    String err="EL IDENTIFICADOR TIPO ARCHIVO " + arch.toString() + " DE LA FUNCION GRAFICAR: NO HA SIDO ENCONTRADA" ;
                    pila_imprimirErrores.push(err); 
               } 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-13)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IMPRICOCAT ::= IMPRICOCAT coma cadena 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("IMPRICOCAT",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IMPRICOCAT ::= IMPRICOCAT coma id 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("IMPRICOCAT",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPRICOCAT ::= cadena 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("IMPRICOCAT",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPRICOCAT ::= id 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("IMPRICOCAT",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERADORES ::= mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERADORES ::= menor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERADORES ::= mayorigualque 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERADORES ::= menorigualque 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERADORES ::= igualigual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERADORES ::= diferenteque 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR ::= menos enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 String c=a.toString() + b.toString(); 
            RESULT=c; 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= enteroposit punto enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 String d=a.toString() + b.toString() + c.toString(); 
            RESULT=d; 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= menos enteroposit punto enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 String e=a.toString() + b.toString() + c.toString() + d.toString();
            RESULT=e; 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALORES_CLAVE ::= cadena coma VALORES_CLAVE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).value;
		 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_CLAVE",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALORES_CLAVE ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_CLAVE",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REGISTROS ::= llaveabre VALORES_REGISTROS llavecierra REGISTROS 
            {
              Object RESULT =null;
		  
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("REGISTROS",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // REGISTROS ::= 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("REGISTROS",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALORES_REGISTROS ::= cadena coma VALORES_REGISTROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).value;
		 
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALORES_REGISTROS ::= enteroposit coma VALORES_REGISTROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).value;
		
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALORES_REGISTROS ::= menos enteroposit coma VALORES_REGISTROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).value;
		
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALORES_REGISTROS ::= enteroposit punto enteroposit coma VALORES_REGISTROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).value;
		
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALORES_REGISTROS ::= menos enteroposit punto enteroposit coma VALORES_REGISTROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).value;
		
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALORES_REGISTROS ::= enteroposit punto enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALORES_REGISTROS ::= menos enteroposit punto enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALORES_REGISTROS ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALORES_REGISTROS ::= enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALORES_REGISTROS ::= menos enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_funciones$stack.peek()).value;
		
              CUP$analisis_sintactico_funciones$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.elementAt(CUP$analisis_sintactico_funciones$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_funciones$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_funciones$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico_funciones$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_funciones$do_action(
    int                        CUP$analisis_sintactico_funciones$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_funciones$parser,
    java.util.Stack            CUP$analisis_sintactico_funciones$stack,
    int                        CUP$analisis_sintactico_funciones$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico_funciones$do_action_part00000000(
                               CUP$analisis_sintactico_funciones$act_num,
                               CUP$analisis_sintactico_funciones$parser,
                               CUP$analisis_sintactico_funciones$stack,
                               CUP$analisis_sintactico_funciones$top);
    }
}

}
