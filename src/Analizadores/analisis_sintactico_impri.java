
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.io.*;
import java.util.*;
import java.text.*;
import java.util.Stack;
import javax.swing.table.DefaultTableModel;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico_impri extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos_impri.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico_impri() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico_impri(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico_impri(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\013\000\002\002\015" +
    "\000\002\002\013\000\002\002\015\000\002\002\021\000" +
    "\002\002\021\000\002\002\021\000\002\002\021\000\002" +
    "\002\020\000\002\002\002\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\007\003\000\002\007\004\000" +
    "\002\007\005\000\002\007\006\000\002\004\005\000\002" +
    "\004\003\000\002\005\006\000\002\005\002\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\010\003" +
    "\000\002\006\005\000\002\006\005\000\002\006\006\000" +
    "\002\006\007\000\002\006\010\000\002\006\005\000\002" +
    "\006\006\000\002\006\003\000\002\006\003\000\002\006" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\022\002\ufff4\025\010\026\013\027\006\031" +
    "\012\032\004\037\007\041\005\001\002\000\004\042\156" +
    "\001\002\000\004\011\141\001\002\000\004\042\131\001" +
    "\002\000\004\042\072\001\002\000\004\004\062\001\002" +
    "\000\004\002\061\001\002\000\004\011\047\001\002\000" +
    "\004\004\014\001\002\000\004\005\015\001\002\000\006" +
    "\006\uffe6\007\016\001\002\000\010\016\024\043\023\044" +
    "\025\001\002\000\004\006\020\001\002\000\022\002\ufff4" +
    "\025\010\026\013\027\006\031\012\032\004\037\007\041" +
    "\005\001\002\000\004\002\uffff\001\002\000\004\010\045" +
    "\001\002\000\006\010\uffda\013\043\001\002\000\004\044" +
    "\034\001\002\000\010\010\uffd9\013\027\015\026\001\002" +
    "\000\004\044\031\001\002\000\010\016\024\043\023\044" +
    "\025\001\002\000\004\010\uffe0\001\002\000\006\010\uffdc" +
    "\013\032\001\002\000\010\016\024\043\023\044\025\001" +
    "\002\000\004\010\uffde\001\002\000\010\010\uffd8\013\036" +
    "\015\035\001\002\000\004\044\040\001\002\000\010\016" +
    "\024\043\023\044\025\001\002\000\004\010\uffdf\001\002" +
    "\000\006\010\uffdb\013\041\001\002\000\010\016\024\043" +
    "\023\044\025\001\002\000\004\010\uffdd\001\002\000\010" +
    "\016\024\043\023\044\025\001\002\000\004\010\uffe1\001" +
    "\002\000\006\006\uffe6\007\016\001\002\000\004\006\uffe7" +
    "\001\002\000\006\042\052\043\051\001\002\000\006\012" +
    "\053\013\054\001\002\000\006\012\uffe3\013\uffe3\001\002" +
    "\000\006\012\uffe2\013\uffe2\001\002\000\004\014\057\001" +
    "\002\000\006\042\056\043\055\001\002\000\006\012\uffe5" +
    "\013\uffe5\001\002\000\006\012\uffe4\013\uffe4\001\002\000" +
    "\022\002\ufff4\025\010\026\013\027\006\031\012\032\004" +
    "\037\007\041\005\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\001\001\002\000\004\005\063\001\002\000\004" +
    "\043\064\001\002\000\006\006\uffe8\013\070\001\002\000" +
    "\004\006\066\001\002\000\022\002\ufff4\025\010\026\013" +
    "\027\006\031\012\032\004\037\007\041\005\001\002\000" +
    "\004\002\000\001\002\000\004\043\064\001\002\000\004" +
    "\006\uffe9\001\002\000\004\004\073\001\002\000\004\040" +
    "\074\001\002\000\004\011\075\001\002\000\004\042\076" +
    "\001\002\000\004\013\077\001\002\000\004\043\100\001" +
    "\002\000\004\013\101\001\002\000\016\017\107\020\106" +
    "\021\105\022\110\023\102\024\103\001\002\000\004\013" +
    "\uffef\001\002\000\004\013\uffee\001\002\000\004\013\111" +
    "\001\002\000\004\013\ufff1\001\002\000\004\013\ufff2\001" +
    "\002\000\004\013\ufff3\001\002\000\004\013\ufff0\001\002" +
    "\000\010\016\114\043\112\044\115\001\002\000\004\012" +
    "\126\001\002\000\004\012\123\001\002\000\004\044\120" +
    "\001\002\000\006\012\uffed\015\116\001\002\000\004\044" +
    "\117\001\002\000\004\012\uffeb\001\002\000\006\012\uffec" +
    "\015\121\001\002\000\004\044\122\001\002\000\004\012" +
    "\uffea\001\002\000\004\014\124\001\002\000\022\002\ufff4" +
    "\025\010\026\013\027\006\031\012\032\004\037\007\041" +
    "\005\001\002\000\004\002\ufff7\001\002\000\004\014\127" +
    "\001\002\000\022\002\ufff4\025\010\026\013\027\006\031" +
    "\012\032\004\037\007\041\005\001\002\000\004\002\ufff6" +
    "\001\002\000\004\004\132\001\002\000\004\030\133\001" +
    "\002\000\004\011\134\001\002\000\004\043\135\001\002" +
    "\000\004\012\136\001\002\000\004\014\137\001\002\000" +
    "\022\002\ufff4\025\010\026\013\027\006\031\012\032\004" +
    "\037\007\041\005\001\002\000\004\002\ufffd\001\002\000" +
    "\004\043\142\001\002\000\004\013\143\001\002\000\004" +
    "\043\144\001\002\000\004\013\145\001\002\000\004\042" +
    "\146\001\002\000\004\013\147\001\002\000\004\043\150" +
    "\001\002\000\004\013\151\001\002\000\004\043\152\001" +
    "\002\000\004\012\153\001\002\000\004\014\154\001\002" +
    "\000\022\002\ufff4\025\010\026\013\027\006\031\012\032" +
    "\004\037\007\041\005\001\002\000\004\002\ufff5\001\002" +
    "\000\004\004\157\001\002\000\012\033\161\034\162\035" +
    "\160\036\163\001\002\000\004\011\217\001\002\000\004" +
    "\011\210\001\002\000\004\011\203\001\002\000\004\011" +
    "\164\001\002\000\004\042\165\001\002\000\004\013\166" +
    "\001\002\000\004\043\167\001\002\000\004\013\170\001" +
    "\002\000\016\017\107\020\106\021\105\022\110\023\102" +
    "\024\103\001\002\000\004\013\172\001\002\000\010\016" +
    "\114\043\173\044\115\001\002\000\004\012\200\001\002" +
    "\000\004\012\175\001\002\000\004\014\176\001\002\000" +
    "\022\002\ufff4\025\010\026\013\027\006\031\012\032\004" +
    "\037\007\041\005\001\002\000\004\002\ufff9\001\002\000" +
    "\004\014\201\001\002\000\022\002\ufff4\025\010\026\013" +
    "\027\006\031\012\032\004\037\007\041\005\001\002\000" +
    "\004\002\ufff8\001\002\000\004\042\204\001\002\000\004" +
    "\012\205\001\002\000\004\014\206\001\002\000\022\002" +
    "\ufff4\025\010\026\013\027\006\031\012\032\004\037\007" +
    "\041\005\001\002\000\004\002\ufffb\001\002\000\004\042" +
    "\211\001\002\000\004\013\212\001\002\000\004\043\213" +
    "\001\002\000\004\012\214\001\002\000\004\014\215\001" +
    "\002\000\022\002\ufff4\025\010\026\013\027\006\031\012" +
    "\032\004\037\007\041\005\001\002\000\004\002\ufffc\001" +
    "\002\000\004\042\220\001\002\000\004\013\221\001\002" +
    "\000\004\043\222\001\002\000\004\012\223\001\002\000" +
    "\004\014\224\001\002\000\022\002\ufff4\025\010\026\013" +
    "\027\006\031\012\032\004\037\007\041\005\001\002\000" +
    "\004\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\016\001\001\000\004" +
    "\006\021\001\001\000\002\001\001\000\004\002\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\041\001\001\000" +
    "\002\001\001\000\004\006\043\001\001\000\002\001\001" +
    "\000\004\005\045\001\001\000\002\001\001\000\004\010" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\066\001\001\000\002\001\001\000\004\004\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\170\001\001\000\002" +
    "\001\001\000\004\007\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\224\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico_impri$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico_impri$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico_impri$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
    //para imprimir en consola
    public static Stack<String> pila_imprimirConsola = new Stack<String>();
    public static Stack<String> pila_imprimirErrores = new Stack<String>();

    //guarda los modelos de tabla
    public HashMap<String,DefaultTableModel> hmTablasArchivos= new HashMap<String,DefaultTableModel>();
    
    //para guardar variables y verificar si existe la variable
    public HashMap<String,Object> alExistenciaDeVariable= new HashMap<String,Object>();


    public void imprimir(String impre)
    {
        //if(banderaVariable==true) //sino existe alguna variable seria false y no imprimiria
        //{
            pila_imprimirConsola.push(impre);
        //}
        //banderaVariable=true; //si viene false, cambia de nuevo a true para haci poder hacer el mismo analisis en la siguiente impresion
    }

    public void parserPrincipal(String txtArea)
    {
        try {
            Analizador_Lexico lexico= new Analizador_Lexico(new BufferedReader(new StringReader(txtArea)));
            analisis_sintactico sintactico = new analisis_sintactico(lexico);
            sintactico.parse(); 
            pila_imprimirErrores = (Stack<String>)sintactico.pila_imprimirErrores; // no .clone porque sino no se vacia
            hmTablasArchivos= (HashMap) sintactico.hmTablasArchivos.clone();
            alExistenciaDeVariable=(HashMap) sintactico.alExistenciaDeVariable.clone();

            Analizador_Lexico lexicoF= new Analizador_Lexico(new BufferedReader(new StringReader(txtArea)));
            analisis_sintactico_funciones sintacticoF = new analisis_sintactico_funciones(lexicoF);
            sintacticoF.pila_imprimirErrores=(Stack<String>)sintactico.pila_imprimirErrores;
            sintacticoF.hmTablasArchivos=(HashMap) sintactico.hmTablasArchivos.clone();
            sintacticoF.alExistenciaDeVariable=(HashMap) sintactico.alExistenciaDeVariable.clone();
            sintacticoF.parse(); 
            pila_imprimirErrores = (Stack<String>)sintacticoF.pila_imprimirErrores; // no .clone porque sino no se vacia
            hmTablasArchivos= (HashMap) sintacticoF.hmTablasArchivos.clone();
            alExistenciaDeVariable=(HashMap) sintacticoF.alExistenciaDeVariable.clone();
        } catch (Exception e) {
        }
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        //String aa="ERROR SINTACTICO: IMPRI " + "Lexema: " + lexema + " Fila: " + fila + " Columna: " + columna + "\n";
        //System.out.println(aa);        
        //System.out.println("\t\tLexema: "+lexema);
        //System.out.println("\t\tFila: "+fila);
        //System.out.println("\t\tColumna: "+columna);
                
                
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        //System.out.println("!!!!!!! Error Sintactico !!!!!!! IMPRI ");
        //System.out.println("\t\tLexema: "+lexema);
        //System.out.println("\t\tFila: "+fila);
        //System.out.println("\t\tColumna: "+columna);
        

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico_impri$actions {



  private final analisis_sintactico_impri parser;

  /** Constructor */
  CUP$analisis_sintactico_impri$actions(analisis_sintactico_impri parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_impri$do_action_part00000000(
    int                        CUP$analisis_sintactico_impri$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_impri$parser,
    java.util.Stack            CUP$analisis_sintactico_impri$stack,
    int                        CUP$analisis_sintactico_impri$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico_impri$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico_impri$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico_impri$parser.done_parsing();
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= claves igual corchabre VALORES_CLAVE corchcierra INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= registros igual corchabre REGISTROS corchcierra INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= imprimir parenabre IMPRICOCAT parencierra puntocoma INICIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).value;
		  String valor=a.toString(); 
            valor+="\n";
            imprimir(valor); 
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= archivo id igual leerarchivo parenabre cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= numerico id igual sumar parenabre id coma cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= numerico id igual contar parenabre id parencierra puntocoma INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= numerico id igual promedio parenabre id coma cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= numerico id igual contarsi parenabre id coma cadena coma OPERADORES coma VALOR parencierra puntocoma INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= numerico id igual contarsi parenabre id coma cadena coma OPERADORES coma cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= cadenareserv id igual obtenersi parenabre id coma cadena coma OPERADORES coma VALOR parencierra puntocoma INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= cadenareserv id igual obtenersi parenabre id coma cadena coma OPERADORES coma cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= graficar parenabre cadena coma cadena coma id coma cadena coma cadena parencierra puntocoma INICIO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-13)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPERADORES ::= mayor 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPERADORES ::= menor 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERADORES ::= mayorigualque 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERADORES ::= menorigualque 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERADORES ::= igualigual 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERADORES ::= diferenteque 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("OPERADORES",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VALOR ::= enteroposit 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALOR ::= menos enteroposit 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= enteroposit punto enteroposit 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALOR ::= menos enteroposit punto enteroposit 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALORES_CLAVE ::= cadena coma VALORES_CLAVE 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_CLAVE",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALORES_CLAVE ::= cadena 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_CLAVE",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // REGISTROS ::= llaveabre VALORES_REGISTROS llavecierra REGISTROS 
            {
              Object RESULT =null;
		  
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("REGISTROS",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // REGISTROS ::= 
            {
              Object RESULT =null;

              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("REGISTROS",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPRICOCAT ::= IMPRICOCAT coma cadena 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.peek()).value;
		 String cade=a.toString().substring(1,a.toString().length()-1); String conca= str.toString() + cade; RESULT=conca;
            
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("IMPRICOCAT",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IMPRICOCAT ::= IMPRICOCAT coma id 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.peek()).value;
		 if(alExistenciaDeVariable.containsKey(a.toString()))
                {
                    String iden= alExistenciaDeVariable.get(a).toString(); 
                    String conca= str.toString()+iden ; 
                    RESULT=conca;
                }else
                {  
                    String exis="LA VARIABLE " + a.toString() + " PARA IMPRIMIR, NO EXISTE" ;
                    pila_imprimirErrores.push(exis);
                    RESULT="";
                } 
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("IMPRICOCAT",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPRICOCAT ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.peek()).value;
		 String cade=a.toString().substring(1,a.toString().length()-1); RESULT=cade; 
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("IMPRICOCAT",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMPRICOCAT ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.peek()).value;
		 if(alExistenciaDeVariable.containsKey(a.toString()))
                {
                    String iden=alExistenciaDeVariable.get(a).toString(); 
                    RESULT=iden;
                }else
                {  
                    String exis="LA VARIABLE " + a.toString() + " PARA IMPRIMIR, NO EXISTE" ;
                    pila_imprimirErrores.push(exis);
                    RESULT="";
                }
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("IMPRICOCAT",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALORES_REGISTROS ::= cadena coma VALORES_REGISTROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).value;
		 
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALORES_REGISTROS ::= enteroposit coma VALORES_REGISTROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).value;
		
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALORES_REGISTROS ::= menos enteroposit coma VALORES_REGISTROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).value;
		
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALORES_REGISTROS ::= enteroposit punto enteroposit coma VALORES_REGISTROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).value;
		
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALORES_REGISTROS ::= menos enteroposit punto enteroposit coma VALORES_REGISTROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).value;
		
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALORES_REGISTROS ::= enteroposit punto enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.peek()).value;
		
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALORES_REGISTROS ::= menos enteroposit punto enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.peek()).value;
		
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALORES_REGISTROS ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.peek()).value;
		
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALORES_REGISTROS ::= enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.peek()).value;
		
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALORES_REGISTROS ::= menos enteroposit 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_impri$stack.peek()).value;
		
              CUP$analisis_sintactico_impri$result = parser.getSymbolFactory().newSymbol("VALORES_REGISTROS",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.elementAt(CUP$analisis_sintactico_impri$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_impri$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_impri$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico_impri$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_impri$do_action(
    int                        CUP$analisis_sintactico_impri$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_impri$parser,
    java.util.Stack            CUP$analisis_sintactico_impri$stack,
    int                        CUP$analisis_sintactico_impri$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico_impri$do_action_part00000000(
                               CUP$analisis_sintactico_impri$act_num,
                               CUP$analisis_sintactico_impri$parser,
                               CUP$analisis_sintactico_impri$stack,
                               CUP$analisis_sintactico_impri$top);
    }
}

}
